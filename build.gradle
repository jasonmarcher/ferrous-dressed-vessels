buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.apache.commons:commons-csv:1.6"
    }
}

import java.io.FileWriter
import java.nio.charset.Charset
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.Calendar
import org.apache.commons.csv.CSVFormat
import org.apache.commons.csv.CSVParser
import org.apache.commons.csv.CSVPrinter

task generateClassData(type: Copy) {
    into 'build'
    from 'res/prebuilt/classes.csv'
}

task generatePrototypeData(type: Copy) {
    into 'build'
    from 'res/prebuilt'
    include 'ammo.csv'
    include 'batteries.csv'
    include 'fitting-battery.csv'
    include 'gun-mounts.csv'
    include 'guns.csv'
    include 'launcher-mount.csv'
}

task generateShipData(type: Copy) {
    into 'build'
    from 'res/prebuilt'
    include 'events.csv'
    include 'service.csv'
}

task generateWorkbooks(type: Copy) {
    into 'build'
    from 'res/workbooks'
    include 'Ferrous Dressed Vessels.twb'
}

task generateShipHistory {
    dependsOn generateShipData

    doLast {
        file(buildDir).mkdirs()
        def today = LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE)

        def printer = new CSVPrinter(new FileWriter("$buildDir/history.csv"), CSVFormat.EXCEL)
        printer.printRecord('HullID','ClassID','FittingID','ShipName','RecordType','State','Date','WeightedTime')

        // History
        def records = CSVParser.parse(file("$buildDir/service.csv"), Charset.forName('UTF-8'), CSVFormat.EXCEL.withFirstRecordAsHeader())
        def calendar = Calendar.getInstance()
        int line = 0
        records.forEach { record ->
            try {
                line++
                if (record.get("ShipName")) {
                    if (!record.get("Start")) {throw new GradleException("Ship '${record.get("ShipName")}' is missing a Start date for service history.")}

                    if (record.get("Start") == record.get("End")) {
                        // Event
                        printer.print(record.get('HullID'))
                        printer.print(record.get('ClassID'))
                        printer.print(record.get('FittingID'))
                        printer.print(record.get('ShipName'))
                        printer.print('Event')
                        printer.print(record.get('Fate'))
                        printer.print(record.get("Start"))
                        printer.print(1)
                        printer.println()
                    } else {
                        // Service
                        def currentDate = LocalDate.parse(record.get("Start"))
                        def endDate = LocalDate.parse(record.get("End") ?: today)
                        def monthFraction = 0
                        
                        while (currentDate.isBefore(endDate)) {
                            monthFraction = Duration.between(currentDate.atStartOfDay(), endDate.atStartOfDay()).toDays()
                            if (monthFraction < 32) {
                                calendar.set(Calendar.YEAR, currentDate.getYear())
                                calendar.set(Calendar.MONTH, currentDate.getMonth().getValue())
                                monthFraction = (monthFraction / calendar.getActualMaximum(Calendar.DAY_OF_MONTH)).round(1)
                            }

                            if (monthFraction > 1) {
                                monthFraction = 1
                            }

                            printer.print(record.get('HullID'))
                            printer.print(record.get('ClassID'))
                            printer.print(record.get('FittingID'))
                            printer.print(record.get('ShipName'))
                            printer.print('Service')
                            printer.print(record.get('State'))
                            printer.print(currentDate)
                            printer.print(monthFraction)
                            printer.println()
                            currentDate = currentDate.plusMonths(1)
                        }
                    }
                }
            } catch (Exception e) {
                throw new GradleException("Failure processing record at service.csv:${line} | ${e.getMessage()}")
            }
        }

        printer.close(true)
    }
}

task clean(type: Delete) {
    delete 'build'
}

task build {
    dependsOn generateClassData, generateShipHistory, generatePrototypeData, generateWorkbooks
}